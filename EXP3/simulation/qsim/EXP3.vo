// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "05/05/2024 21:23:20"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module bcdCounter (
	clk,
	reset,
	outp);
input 	clk;
input 	reset;
output 	[3:0] outp;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \outp[0]~output_o ;
wire \outp[1]~output_o ;
wire \outp[2]~output_o ;
wire \outp[3]~output_o ;
wire \clk~input_o ;
wire \WideOr0~0_combout ;
wire \reset~input_o ;
wire \outp[2]~reg0_q ;
wire \outp~1_combout ;
wire \outp[3]~reg0_q ;
wire \outp~0_combout ;
wire \outp[1]~reg0_q ;
wire \WideOr1~0_combout ;
wire \outp[0]~reg0_q ;


cyclonev_io_obuf \outp[0]~output (
	.i(\outp[0]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outp[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \outp[0]~output .bus_hold = "false";
defparam \outp[0]~output .open_drain_output = "false";
defparam \outp[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \outp[1]~output (
	.i(\outp[1]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outp[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \outp[1]~output .bus_hold = "false";
defparam \outp[1]~output .open_drain_output = "false";
defparam \outp[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \outp[2]~output (
	.i(\outp[2]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outp[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \outp[2]~output .bus_hold = "false";
defparam \outp[2]~output .open_drain_output = "false";
defparam \outp[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \outp[3]~output (
	.i(\outp[3]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outp[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \outp[3]~output .bus_hold = "false";
defparam \outp[3]~output .open_drain_output = "false";
defparam \outp[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \WideOr0~0 (
// Equation(s):
// \WideOr0~0_combout  = (!\outp[3]~reg0_q  & (!\outp[2]~reg0_q  $ (((!\outp[0]~reg0_q ) # (!\outp[1]~reg0_q )))))

	.dataa(!\outp[0]~reg0_q ),
	.datab(!\outp[1]~reg0_q ),
	.datac(!\outp[2]~reg0_q ),
	.datad(!\outp[3]~reg0_q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr0~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \WideOr0~0 .extended_lut = "off";
defparam \WideOr0~0 .lut_mask = 64'h1E001E001E001E00;
defparam \WideOr0~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \reset~input (
	.i(reset),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\reset~input_o ));
// synopsys translate_off
defparam \reset~input .bus_hold = "false";
defparam \reset~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \outp[2]~reg0 (
	.clk(\clk~input_o ),
	.d(\WideOr0~0_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\outp[2]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \outp[2]~reg0 .is_wysiwyg = "true";
defparam \outp[2]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \outp~1 (
// Equation(s):
// \outp~1_combout  = (!\outp[0]~reg0_q  & (!\outp[1]~reg0_q  & (!\outp[2]~reg0_q  & \outp[3]~reg0_q ))) # (\outp[0]~reg0_q  & (\outp[1]~reg0_q  & (\outp[2]~reg0_q  & !\outp[3]~reg0_q )))

	.dataa(!\outp[0]~reg0_q ),
	.datab(!\outp[1]~reg0_q ),
	.datac(!\outp[2]~reg0_q ),
	.datad(!\outp[3]~reg0_q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\outp~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \outp~1 .extended_lut = "off";
defparam \outp~1 .lut_mask = 64'h0180018001800180;
defparam \outp~1 .shared_arith = "off";
// synopsys translate_on

dffeas \outp[3]~reg0 (
	.clk(\clk~input_o ),
	.d(\outp~1_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\outp[3]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \outp[3]~reg0 .is_wysiwyg = "true";
defparam \outp[3]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \outp~0 (
// Equation(s):
// \outp~0_combout  = (!\outp[3]~reg0_q  & (!\outp[0]~reg0_q  $ (!\outp[1]~reg0_q )))

	.dataa(!\outp[0]~reg0_q ),
	.datab(!\outp[1]~reg0_q ),
	.datac(!\outp[3]~reg0_q ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\outp~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \outp~0 .extended_lut = "off";
defparam \outp~0 .lut_mask = 64'h6060606060606060;
defparam \outp~0 .shared_arith = "off";
// synopsys translate_on

dffeas \outp[1]~reg0 (
	.clk(\clk~input_o ),
	.d(\outp~0_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\outp[1]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \outp[1]~reg0 .is_wysiwyg = "true";
defparam \outp[1]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \WideOr1~0 (
// Equation(s):
// \WideOr1~0_combout  = (!\outp[0]~reg0_q  & ((!\outp[3]~reg0_q ) # ((!\outp[1]~reg0_q  & !\outp[2]~reg0_q ))))

	.dataa(!\outp[0]~reg0_q ),
	.datab(!\outp[1]~reg0_q ),
	.datac(!\outp[2]~reg0_q ),
	.datad(!\outp[3]~reg0_q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr1~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \WideOr1~0 .extended_lut = "off";
defparam \WideOr1~0 .lut_mask = 64'hAA80AA80AA80AA80;
defparam \WideOr1~0 .shared_arith = "off";
// synopsys translate_on

dffeas \outp[0]~reg0 (
	.clk(\clk~input_o ),
	.d(\WideOr1~0_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\outp[0]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \outp[0]~reg0 .is_wysiwyg = "true";
defparam \outp[0]~reg0 .power_up = "low";
// synopsys translate_on

assign outp[0] = \outp[0]~output_o ;

assign outp[1] = \outp[1]~output_o ;

assign outp[2] = \outp[2]~output_o ;

assign outp[3] = \outp[3]~output_o ;

endmodule
